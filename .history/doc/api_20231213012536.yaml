openapi: 3.0.3
info:
  title: WASAphoto's APIs
  description: |-
    The following APIs are for Wasa's first Homework
  version: 1.2.0


tags:
  - name: "login"
    description: Endpoint for login
  - name: "search"
    description: Endpoint for search users
  - name: "user"
    description: Endpoint for user's profile
  - name: "mystream"
    description: Endpoint for user's stream
  - name: "photo"
    description: Endpoint for photo
  - name: "comment"
    description: Endpoint for comment
  - name: "like"
    description: Endpoint for like
  - name: "ban"
    description: Endpoint for ban
  - name: "followers"
    description: Endpoint for followers


#...........................................................................................

paths:
  /session:
    post:
      tags:  ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin

      requestBody:
        description: User details
        content:
            application/json:
                  schema:
                    description: the username and password of user wants to login
                    type: object
                    properties:
                      nickname:
                        type: string
                        description: the nickname of user
                        example: paperino05
                        pattern: '^.*?$'
                        minLength: 8
                        maxLength: 25
                    example:
                      nickname: paperino05
        required: true

      responses:

        '200':
          description: User log-in action successfull
          content:
            application/json:
              schema: { $ref: "#/components/schemas/complete_user" }
        '201':
          description: User log-in action successfull
          content:
            application/json:
              schema: { $ref: "#/components/schemas/complete_user" }

        '400': {$ref: "#/components/responses/BadRequest"}
        '500': {$ref: "#/components/responses/InternalServerError"}

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users:
    get:
      tags: ["search"]
      summary: Get the user profile of certian id
      description: Get the user profile of certian id
      operationId: getUserProfile

      parameters:
        - in: query
          name: id
          description: id of user that is searched
          schema:
            type: string
            pattern: '^.*?$'
            minLength: 3
            maxLength: 16
            example: "Marietto88"
          example: "marion3"
      responses:

        '200':
            description:  The user has been found
            content:
              application/json:
                schema:
                  description: List of users found
                  type: object
                  properties:
                    users:
                      description: it's a list(an array) of users with a partial match with the searched id
                      type: array
                      minItems: 0
                      maxItems: 100
                      items:
                        $ref: "#/components/schemas/user_nickname/properties/nickname"

        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}:

    parameters:
      - $ref: "#/components/parameters/id"

    put:
       tags: ["user"]
       summary: modifies the username
       description: allows the user to modify personal username
       operationId: setMyUserName

       requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
              example:
                username: "Branziono00"
          required: true
       responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"

       security:
         - bearerAuth: []




    get:
      tags: ["user"]
      summary: get all information of user profile
      description: allows you to obtain the profile, with the related information
      operationId: getProfile


      responses:
        '200':
          description: All information of a profile
          content:
            application/json:
              schema: {$ref: "#/components/schemas/complete_profile" }

        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []
#-------------------------------------------------------------------------------------------
  /users/{id}/followers:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
        tags: ["followers"]
        summary: get all followers of user
        description: get all followers of user
        operationId: getFollowers

        responses:
          '200':
            description: All followers of user
            content:
              application/json:
                schema:
                  description: List of followers
                  type: array
                  minItems: 0
                  maxItems: 99999999
                  items:
                    $ref: "#/components/schemas/complete_user"
                  example:
                    - {nickname: "marione11", user_id: "mamario"}
                    - {nickname: "mariotto11", user_id: "mama11"}

          '401':
            $ref: "#/components/responses/Unauthorized"
          '404':
            $ref: "#/components/responses/NotFound"
          '500':
            $ref: "#/components/responses/InternalServerError"

        security:
          - bearerAuth: []
#-------------------------------------------------------------------------------------------

  /users/{id}/mystream:

    parameters:
     - $ref: "#/components/parameters/id"

    get:
      tags: ["mystream"]
      summary: get all post of followers
      description: user's stream
      operationId: getMyStream

      responses:
        '200':
          $ref: "#/components/responses/my_stream"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/photos:

    parameters:
     - $ref: "#/components/parameters/id"

    post:
      tags: ["photo"]
      summary: a user can upload a new photo on personal profile
      description: upload a photo
      operationId: uploadPhoto

      requestBody:
        required: true
        content:
          multipart/from-data:
            schema:
              $ref: "#/components/schemas/photo"
            example:
              file: "1010101010"

      responses:
        '201':
          description: the photo has been uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/complete_photo"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/photos/{photo_id}:
    parameters:
     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/photo_id"

    delete:
      tags: ["photo"]
      description: delete a photo
      operationId: deletePhoto
      summary: user can delete a photo that he has uploaded

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/photos/{photo_id}/comments:

    parameters:
     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/photo_id"

    post:
      tags: ["comment"]
      description: comment a photo
      operationId: commentPhoto
      summary: user can comment a photo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"




      responses:
        '201':
          description: comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment_id"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbiden"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"


      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------
  /users/{id}/photos/{photo_id}/comments/{comment_id}:

    parameters:

     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/photo_id"
     - $ref: "#/components/parameters/comment_id"

    delete:
      tags: ["comment"]
      description: delete a comment
      summary: user can delete a comment that he has written on a photo
      operationId: uncommentPhoto

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/photos/{photo_id}/likes/{like_id}:

    parameters:

     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/photo_id"
     - $ref: "#/components/parameters/like_id"

    put:
      tags: ["like"]
      summary: a user can like another user's post
      description: like  a photo
      operationId: likePhoto

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

    delete:
      tags: ["like"]
      summary: a user can unlike another user's post
      description: unlike a photo
      operationId: unlikePhoto

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/banned_users/{banned_id}:
    parameters:

     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/banned_id"

    put:
      tags: ["ban"]
      summary: a user can ban another user's account
      description: ban another user
      operationId: banUser

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

    delete:

      tags: ["ban"]
      summary: a user can unlike another user's post
      description: unlike a photo
      operationId: unbanUser

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

#-------------------------------------------------------------------------------------------

  /users/{id}/followers/{follow_id}:
    parameters:
     - $ref: "#/components/parameters/id"
     - $ref: "#/components/parameters/follow_id"

    put:
      tags: ["followers"]
      description: |-
        a user can follow another user, so they will
        be added to the following list, with a relative follow_id
      summary: a user follow another user
      operationId: followUser

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

    delete:
      tags: ["followers"]
      description: |-
        a user can delete (unfollow) another user of his
        following list
      summary: a user unfollow another user
      operationId: unfollowUser

      responses:
        '204':
          $ref: "#/components/responses/NoContent"

        '403':
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []


#==========================================================================================
components:


  parameters:

    id:
      name: id
      in: path
      description: id of user
      required: true
      schema:
       type: string
       minLength: 3
       maxLength: 16
       example: Maria667
       pattern: '^.*?$'
#-------------------------------------------------------------------------------------
    comment_id:
      name: comment_id
      in: path
      description: id of comment
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 281
        readOnly: true
#-------------------------------------------------------------------------------------
    photo_id:
      name: photo_id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 281
        readOnly: true
#-------------------------------------------------------------------------------------
    like_id:
      name: like_id
      in: path
      description: id of like
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 13
#-------------------------------------------------------------------------------------
    follow_id:
      name: follow_id
      in: path
      description: id of follower
      required: true
      schema:
        $ref: "#/components/schemas/username"
#-------------------------------------------------------------------------------------
    banned_id:
      name: banned_id
      in: path
      description: id of banned user
      required: true
      schema:
        $ref: "#/components/schemas/username"

#.....................................................................................
  responses:
    #200 status
    my_stream:
      description: Response linked to 200 http status (OK), and return all posts of followed users
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_photo"
#-------------------------------------------------------------------------------------------
    #204
    NoContent:
      description: Response linked to 204 http status (no content)

#-------------------------------------------------------------------------------------------
    #400
    BadRequest:
      description: Response linked to 400 http status (bad request)
      content:
        text/plain:
          schema:
            description: BadRequest
            type: string
            example: "Bad Request"
            minLength: 11
            maxLength: 30

#-------------------------------------------------------------------------------------------

     #401
    Unauthorized:
      description: Unauthorized operation
      content:
        text/plain:
          schema:
            description: Unauthorized
            type: string
            example: "Unauthorized"
            minLength: 12
            maxLength: 30
#-------------------------------------------------------------------------------------------

    #403
    Forbiden:
      description: Response linked to 403 http status(403)
      content:
        text/plain:
          schema:
            description: Forbiden
            type: string
            example: "Forbiden"
            minLength: 7
            maxLength: 30

#-------------------------------------------------------------------------------------------

    #404
    NotFound:
      description: Response linked to 404 http status(the resource is not found)
      content:
        text/plain:
          schema:
            description: Not Found
            type: string
            example: "Not Found"
            minLength: 9
            maxLength: 30

#-------------------------------------------------------------------------------------------

    #500
    InternalServerError:
      description: Response linked to 500 http status (the server encountered an unexpected condition)
      content:
        text/plain:
          schema:
            description: InternalServerError
            type: string
            example: " Internal Server Error"
            minLength: 21
            maxLength: 30

#...........................................................................................

  schemas:
    username:
      description: object that contains the user's id
      type: object
      properties:
        user_id:
          description: It's a unique id for user
          type: string
          minLength: 3
          maxLength: 13
          pattern: "^.*?$"
          example: "Marietto88"
      example:
        user_id: "Marietto88"

#-------------------------------------------------------------------------------------------

    user_nickname:
      description: it's a user's nickname
      type: object
      properties:
        nickname:
          description: String between 3-16 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "Mariotto11"
      example:
        nickname: "Mariotto11"

    complete_user:
      description: define all information of user
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/username/properties/user_id"
        nickname:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example:
        user_id: "Mariotto11"
        nickname: "Mariotto11"


#-------------------------------------------------------------------------------------------

    complete_profile:
      description: define all information of user profile
      type: object
      properties:

          nickname: {$ref: "#/components/schemas/user_nickname/properties/nickname"}

          user_id: {$ref: "#/components/schemas/user_nickname/properties/nickname"}

          followers:
            description: Array of followers
            type: array
            minItems: 0
            maxItems: 99999999
            items:
              $ref: "#/components/schemas/complete_user"
            example:
              - {nickname: "marione11", user_id: "mamario"}
              - {nickname: "mariotto11", user_id: "mama11"}

          following:
            description: Array of followering
            type: array
            minItems: 0
            maxItems: 99999999
            items:
              $ref: "#/components/schemas/complete_user"
            example:
              - {nickname: "marione11", user_id: "mamario"}
              - {nickname: "mariotto11", user_id: "mama11"}

          photos:
            description: Array of photo
            type: array
            minItems: 0
            maxItems: 99999999
            items:
              $ref: "#/components/schemas/complete_photo"
            example:
              - {owner: "marione11", photo_id: 11, likes: 0, comments: 0, date: "2021-05-12"}
              - {owner: "mariotto11", photo_id: 12, likes: 0, comments: 0, date: "2021-05-12"}

#-------------------------------------------------------------------------------------------

    complete_like:
      description: define all information of like
      type: object
      properties:
        like_id:
          description: It's a unique id for like
          type: integer
          format: int64
          example: 578
          minimum: 0
          maximum: 99999
          readOnly: true
        user_id:
          $ref: "#/components/schemas/username/properties/user_id"

      example:
          like_id: 33
          user_id: Marietto119

#-------------------------------------------------------------------------------------------

    comment_id:
      description: define a identifier of comment
      type: object
      properties:
        id:
          description: It's a unique id for comment
          type: integer
          format: int64
          example: 578
          minimum: 0
          maximum: 99999
          readOnly: true

#-------------------------------------------------------------------------------------------

    complete_comment:
      description: complete comment that includes the structure of the comment and its identifier
      type: object
      properties:
        comment_id:
          $ref: "#/components/schemas/comment_id/properties/id"
        user_id:
          $ref: "#/components/schemas/username/properties/user_id"
        comment:
          $ref: "#/components/schemas/comment/properties/comment_text"

      example:
          comment_id: 112
          user_id: Luffy11
          comment: "wow, dove sei??"

#-------------------------------------------------------------------------------------------

    comment:
      description: define a comment
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/username/properties/user_id"

        comment_text:
          type: string
          description: it's a content of comment
          minLength: 3
          maxLength: 100
          pattern: '^.*?$'
          example: bella foto, come stai?

      example:
        user_id: marcolino11
        comment_text: bella foto, dove sei?

#-------------------------------------------------------------------------------------------

    photo:
      description: define a photo
      type: object
      properties:

        photo_id:
          description: It's a unique id for photo
          type: integer
          format: int64
          example: 578
          minimum: 0
          maximum: 99999
          readOnly: true

        file:
          type: string
          description: It's a binary file
          format: binary
          minLength: 0
          maxLength: 999
          example: "1010101010"

      example:
        photo_id: 578
        file: "1010101010"

#-------------------------------------------------------------------------------------------

    complete_photo:
      description: define all information of photo(as a post)
      type: object
      properties:

        owner:
          $ref: "#/components/schemas/user_nickname/properties/nickname"

        photo_id:
          $ref: "#/components/schemas/photo/properties/photo_id"

        likes:
          description: it's a array of like
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: "#/components/schemas/complete_like"
          example:
            - username: RufyDMonkey11
            - like_id: 112



        comments:
          description: it's a array of comments
          type: array
          minItems: 0
          maxItems: 99999
          items:
            $ref: "#/components/schemas/complete_comment"
          example:
            - username: "marcolino11"
            - comment_id: 12
            - comment: "Bella foto, come stai?"

        date:
          description: it's a date of photo's publish
          type: string
          format: date
          example: 2021-05-12

#---------------------------------------------------------------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
































