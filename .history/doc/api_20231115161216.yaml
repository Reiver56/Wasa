openapi: '3.0.3'
info:
  title: WASAphoto's APIs
  description: |-
    The following APIs are for Wasa's first Homework
  version: "1"

  

paths:
  /login:
    post:
      tags:  ["login"] 
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      
      requestBody:
        description: User details
        content:
            application/json: 
                  schema:   
                    description: the username and password of user wants to login
                    type: object
                    properties:
                      username:  
                        type: string
                        example: paperino05
                        pattern: '^.*?$'
                        minLength: 8
                        maxLength: 25
                    
                      password:
                        type: string
                        example: paperino05
                        pattern: '^.*?$'
                        minLength: 8
                        maxLength: 25
              
                  
                
  
        required: true
      responses:
        
        '201': 
          description: User log-in action successfull
          content:
            application/json:
              schema: { $ref: "#/components/schemas/username" } #identifier return
      security:
        - bearerAuth: []

  /users:
    get:
      tags: ["search"]
      summary: Get the user profile of certian id
      description: Get the user profile of certian id
      operationId: getUserProfile

      parameters:
        - in: query
          name: id
          description: id of user that is searched
          schema:
            type: string 
            pattern: '^.*?$'
            minLength: 3
            maxLength: 16
            example: "Marietto88"
          example: "marion3"
      responses:

        '200':
            description:  The user has been found
            content:
              application/json: 
                schema:
                  description: List of users found
                  type: object
                  properties:
                    users: 
                      description: it's a list(an array) of users with a partial match with the searched id
                      type: array
                      minItems: 0
                      maxItems: 10
                      
                      example:
                        - user_id: marion3
                        - user_id: Marietto88
                        - user_id: Marlion2
                        - user_id: martin77
                          
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
                      
      security:
        - bearerAuth: []




  /users/{id}:
    put:
       tags: ["user"]
       summary: modifies the username
       description: allows the user to modify personal username
       operationId: setMyUserName
       
       requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
              example:
                username: "Branziono00"
          required: true
       responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
       security:
         - bearerAuth: []
       

       
     
    get:
      tags: ["user"]
      summary: get all information of user profile
      description: allows you to obtain the profile, with the related information
      operationId: getProfile


      responses:
        '200':
          description: All information of a profile
          content:
            application/json:
              schema: {$ref: "#/components/schemas/complete_profile" }

                  
                  #----------------------------------------
                  

        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []

  #appunti: se per inserire una foto andiamo nel path /user/{id}/photos, per eliminare una foto dobbiamo considerare anche 
  #l'identifier della foto --> fai un altro path
  
  /user/{id}/mystream:
    get:
      tags: ["mystream"]
      summary: get all post of followers
      description: user's stream
      operationId: getMyStream

      responses:
        '200':
            description: get all photos
            content:
              application/json:
                schema:
                  description: it's an array of post
                  type: array
                  items: 
                    $ref: "#/components/schemas/complete_photo"
          #potrebbe essere definito come un array di post

        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []

  /user/{id}/photos:
   
    post: 
      tags: ["photo"]
      summary: a user can upload a new photo on personal profile
      description: upload a photo
      operationId: uploadPhoto

      requestBody:
        required: true
        content:
          multipart/from-data:
            schema: 
              $ref: "#/components/schemas/photo"
            example:
              file: "1010101010"

        



      responses:
        '200':
          description: the photo has been uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: the photo was uploaded successfully
                  photo_identifier:
                    $ref: "#/components/schemas/photo/properties/photo_id" 



        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
     
      security:
        - bearerAuth: []

  /user/{id}/photos/{photo_id}: 
    
    #inserire l'eliminazione della foto

    delete:
      tags: ["photo"]
      description: delete a photo
      operationId: deletePhoto  

      responses:
        '200':
          description: OK message
          content:
            application/json:
              schema: 
                type: string
                example: the photo was deleted successfully
           
        
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []

  /user/{id}/photos/{photo_id}/comments:
    
    post:
      tags: ["comment"]
      description: comment a photo
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:   
              $ref: "#/components/schemas/comment"
              


          
      responses:
        '200':
          description: return a identifier of photo 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment_id"
      
      security:
        - bearerAuth: []
  
  
  /user/{id}/photos/{photo_id}/comments/{comment_id}:

    delete:
      tags: ["comment"]
      description: delete a comment
      operationId: uncommentPhoto

      responses:
        '200':
          description: OK message
          content:
            application/json:
              schema: 
                type: string
                example: the comment was deleted successfully
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []

  /user/{id}/photos/{photo_id}/likes:

    put:
      tags: ["likes"]
      summary: a user can like another user's post
      description: like  a photo
      operationId: likePhoto

      responses:
        '200':
          description: Ok message, with return of identifier of like
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/like_id"

              example: 13
                
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError" 
      
      security:
        - bearerAuth: []

  /user/{id}/photos/{photo_id}/likes/{like_id}:
    
    delete:
      tags: ["likes"]
      summary: a user can unlike another user's post
      description: unlike a photo
      operationId: unlikePhoto

      responses:
        '200':
          description: Ok the like was delete with success

        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []

  /user/{id}/banned_users:

    put:
      tags: ["ban"]
      summary: a user can ban another user's account
      description: ban another user
      operationId: banUser

      responses:
        '200':
          description: Ok message, with return of identifier of like
          content:
            application/json:
              schema:
                $ref: "#/components/parameters/user_banned_id"
              
        
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

      security:
        - bearerAuth: []
  
  /user/{id}/banned_users/{user_banned_id}:
    
    
    delete:

      tags: ["ban"]
      summary: a user can unlike another user's post
      description: unlike a photo
      operationId: unbanUser

      responses:
        '200':
          description: User was unbanned successfully

        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
    
      security:
        - bearerAuth: []
  
  /user/{id}/followed:
    put:
      tags: ["follow"]
      description: |- 
        a user can follow another user, so they will 
        be added to the following list, with a relative follow_id
      summary: a user follow another user
      operationId: followUser

      responses:
        '200':
          description: Ok message, with return of follow identifier
          content:
            application/json:
              schema:   
                $ref: "#/components/schemas/follow_id"
         
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []
 
 
  /user/{id}/followed/{follow_id}:
    delete:
      tags: ["follow"]
      description: |-
        a user can delete (unfollow) another user of his
        following list
      summary: a user unfollow another user

      responses:
        '200':
          description: User was unfollow successfully

        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: []    


#==========================================================================================
components:


  parameters:

    id: 
      name: user idetifier
      in: path
      required: true
      schema:
       type: string
       minLength: 3
       maxLength: 16
       example: Maria667
       pattern: '^[a-zA-Z0-9]+$'
       

    photo_id:
      name: photo identifier
      in: path
      
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 281
        readOnly: true

    like_id:
      name: like identifier
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 13
    
    follow_id:
      name: user follow idenfier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/username"

    user_banned_id:
      name: user banned identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/username"



  #-------------------------------------------------------------------------------------
  responses:
    #other type of responses
    NoContent:
      description: Response linked to 204 http status (no content)
    
    
    #Errors:
    #forse è meglio definire i vari errori con relativi messaggi di output
    Forbiden:
      
    
      description: Response linked to 403 http status(403)
      content:
        application/json:
          schema: 
           $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Response linked to 500 http status (the server encountered an unexpected condition)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized: 
      description: Unauthorized operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 

    NotFound:
      description: Response linked to 404 http status(the resource is not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 

  #-------------------------------------------------------------------------------------
  schemas:
    
    username: 
      description: Username
      type: string
      pattern: "^[a-z0-9]{3,13}$"
      example: "Marietto88"
      minLength: 3
      maxLength: 13
      
    user_nickname:
      description: it's a user's nickname 
      type: object
      properties:
        nickname:
          description: String between 3-16 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "Mariotto11"
      example:
        nickname: "Mariotto11"

    user_complete:
      description: contains nickname and unique id
      type: object
      properties:
        user_id: {$ref: "#/components/schemas/user_nickname/properties/nickname"}
        nickname: {$ref: "#/components/schemas/user_nickname/properties/nickname"}
      example:
        user_id: Marietto88
        nickname: Marietto11
    
    
    
    complete_profile:
      description: define all information of user profile
      type: object
      properties:
          
          nickname: {$ref: "#/components/schemas/user_nickname/properties/nickname"}
          
          User_id: {$ref: "#/components/schemas/user_nickname/properties/nickname"}
          
          followers:
            description: Array of followers
            type: array
            items:
              $ref: "#/components/schemas/user_nickname"
            example:
              - {nickname: "marione11", user_id: "mamario"}
              - {nickname: "mariotto11", user_id: "mama11"}
          
          following:
            description: Array of followering
            type: array
            items:
              $ref: "#/components/schemas/user_nickname"
            example:
              - {nickname: "marione11", user_id: "mamario"}
              - {nickname: "mariotto11", user_id: "mama11"}
          
          photos:
            description: Array of photo
            type: array
            items:
              $ref: "#/components/schemas/complete_photo"
            #da scrivere degli esempi

              



           




    complete_like:
      description: define all information of like
      type: object
      properties:
        like_id:
          description: It's a unique id for like
          type: integer
          format: int64
          example: 578
          minimum: 0
          maximum: 99999
          readOnly: true
          
        username:
          $ref: "#/components/schemas/username"
      example:
        - like_id: 33
        - username: Marietto119
    banned
    follow_id:
      description: define a unique idenfier for follow
      type: integer
      format: int64
      example: 22
      minimum: 0
      maximum: 9999
      readOnly: true

    like_id:
      description: It's a unique id for photo
      type: integer
      format: int64
      example: 578
      minimum: 0
      maximum: 99999
      readOnly: true

    comment_id:
      description: define a identifier of comment
      type: integer
      format: int64
      minimum: 1
      maximum: 999
      example: 121
      
    
    complete_comment:
      description: complete comment that includes the structure of the comment and its identifier
      type: object
      properties:
        comment_id:
          $ref: "#/components/schemas/comment_id"
        username: 
          $ref: "#/components/schemas/username"
        comment:
          $ref: "#/components/schemas/comment/properties/comment"
      example:
        - comment_id: 112
        - username: Monkey.D.Luffy11
        - comment: "wow, dove sei??"
        

    comment: 
      description: define a comment
      type: object
      properties:
        username: 
          $ref: "#/components/schemas/username"
          
        comment:
          type: string
          minLength: 3
          maxLength: 100
          example: bella foto, come stai?
      example: bella foto, dove sei?

    
       

    photo: 
      description: define a photo
      type: object
      properties:

        photo_id:
          description: It's a unique id for photo
          type: integer
          format: int64
          example: 578
          minimum: 0
          maximum: 99999
          readOnly: true

        file:
          type: string 
          format: binary
          minLength: 0
          maxLength: 999
          example: "1010101010"

      example: 
        photo_id: 578
        file: "1010101010"
    
    
    complete_photo:
      description: define all information of photo(as a post)
      type: object
      properties:

        username:
          $ref: "#/components/schemas/username"

        photo: 
          $ref: "#/components/schemas/photo"

        likes: 
          description: it's a array of like
          type: array
          minItems: 0
          maxItems: 999999
          items:
            $ref: "#/components/schemas/complete_like"
          example:
            - username: RufyDMonkey11
            - like_id: 112
            
            

        comments:
          description: it's a array of comments
          type: array
          minItems: 0
          maxItems: 99999
          items: 
            $ref: "#/components/schemas/complete_comment"
          example:
            - username: "marcolino11"
            - comment_id: 12
            - comment: "Bella foto, come stai?"
        
        date:
          description: it's a date of photo's publish
          type: string
          format: date
          example: "2023-04-05"




   
      
      

    
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code 
        - message
        
#---------------------------------------------------------------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
        
            
            
    

      
      










  
  
        

              
   

      



  
    

