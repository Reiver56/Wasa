openapi: '3.0.3'
info:
  title: WASAphoto's APIs
  description: |-
    The following APIs are for Wasa's first Homework
  version: "1"

  

paths:
  /login:
    post:
      tags:  ["login"] 
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 16
                password:
                  type: string
                  example: paperino05
                  pattern: '^.*?$'
                  minLength: 8
                  maxLength: 25
  
        required: true
      responses:
        
        '201': 
          description: User log-in action successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string 
                    example: "abcdefgg45"


  /users:
    get:
      tags: ["search"]
      summary: Get the user profile of certian id
      description: Get the user profile of certian id
      operationId: getUserProfile

      parameters:
        - in: query
          name: id
          description: id of user that is searched
          schema:
            type: string 
            pattern: '^.*?$'
            minLength: 3
            maxLength: 16
            example: "Marietto88"
          example: "marion3"
      responses:

        '200':
            description:  The user has been found
            content:
              application/json: 
                schema:
                  description: List of users found
                  type: object
                  properties:
                    users: 
                      description: it's a list(an array) of users with a partial match with the searched id
                      type: array
                      minItems: 0
                      maxItems: 10
                      
                      example:
                        - user_id: marion3
                        - user_id: Marietto88
                        - user_id: Marlion2
                        - user_id: martin77
                          
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"
                      
      security:
        - bearerAuth: []




  /users/{id}:
    put:
       tags: ["user"]
       summary: modifies the username
       description: allows the user to modify personal username
       operationId: setMyUserName

       requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username'
              example:
                username: "Branziono00"
          required: true
       responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"


       
     
    get:
      tags: ["user"]
      summary: get all information of user profile
      description: allows you to obtain the profile, with the related information
      operationId: getProfile


      responses:
        '200':
          description: All information of a profile
          content:
            application/json:
              schema:
                description: Object containing all profile information
                type: object
                properties:

                  user_id:
                    $ref: "#/components/schemas/username"
                  

                  #da definire-----------------------------
                  followers:
                    description: array of follower
                    type: array
                    minItems: 0
                    maxItems: 999999999

                  following: 
                    description: array of followed users
                    type: array
                    minItems: 0
                    maxItems: 999999999
                  
                  photos:
                    description: array of photos
                    type: array
                    minItems: 0
                    maxItems: 9999999999
                  #----------------------------------------
                  

        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalServerError"

  #appunti: se per inserire una foto andiamo nel path /user/{id}/photos, per eliminare una foto dobbiamo considerare anche 
  #l'identifier della foto --> fai un altro path
  
  /user/{id}/photos:
   
    post: 
      tags: ["photo"]
      summary: upload a photo
      description: a user can upload a new photo on personal profile
      operationId: uploadPhoto

      requestBody:
        required: true
        content:
          multipart/from-data:
            schema: 
              $ref: "#/components/schemas/photo"
            example:
              file: "1010101010"

        



      responses:
        '200':
          description: the photo has been uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: the photo was uploaded successfully
                  photo_identifier:
                    $ref: "#/components/parameters/photo_id" #rilascio dell'id della foto cosa che mi serve poi per fare altre azioni 



        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

  /user/{id}/photos/{photo_identifier}: 
    #inserire l'eliminazione della foto
    delete:
      tags: ["photo"]
      description: delete a photo
      operationId: deletePhoto  

      responses:
        '200':
          description: OK message
          content:
            application/json:
              schema: 
                type: string
                example: the photo was deleted successfully
           
        
        '403': 
          $ref: "#/components/responses/Forbiden"

        '401':
          $ref: "#/components/responses/Unauthorized"

        '500':
          $ref: "#/components/responses/InternalServerError"

  /user/{id}/photos/{photo_identifier}/comments:


    post:
      tags: ["photo"]
      description: comment a photo
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:   
              $ref: "#/components/schemas/comment"

          
      responses:
        '200':
          description: return a identifier of photo 




components:


  parameters:
    photo_id:
      name: photo identifier
      in: path
      
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 999
        example: 281
        readOnly: true

  responses:
    #other type of responses
    NoContent:
      description: Response linked to 204 http status (no content)
    
    
    #Errors:
    #appunto forse Ã¨ meglio definire i vari errori con relativi messaggi di output
    Forbiden:
      
    
      description: Response linked to 403 http status(403)
      content:
        application/json:
          schema: 
           $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Response linked to 500 http status (the server encountered an unexpected condition)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized: 
      description: Unauthorized operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 

    NotFound:
      description: Response linked to 404 http status(the resource is not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 


  schemas:
    comment: 
      description: define a comment
      type: object
      properties:
        username: 
          $ref: "#/components/schemas/username/properties/nickname"
          
        comments:
          type: string
          minLength: 3
          maxLength: 100
          example: bella foto, come stai?
      example: bella foto, dove sei?

    
        

    photo: 
      description: define a photo
      type: object
      properties:
        file:
          type: string 
          format: binary
          minLength: 0
          maxLength: 999
          example: "1010101010"
      example: 
        file: "1010101010"
        

    username: 
      
      description: username
      type: object
      properties:
        nickname:
          description: string between 4-18 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "Marietto88"
      example:
        nickname: "Marietto88" 

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code 
        - message

 
      
        
            
            
    

      
      










  
  
        

              
   

      



  
    

