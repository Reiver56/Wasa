openapi: '3.0.3'
info:
  title: WASAphoto's APIs
  description: |-
    The following APIs are for Wasa's first Homework
  version: '1.0.0'

  

tags:


  - name: 'user'
    description: Get information about users
  - name: 'research'
    description: Relationships to other users outgoing and incoming
  - name: 'media'
    description: Get information about media
  - name: 'comments'
    description: Manage comments
  - name: 'likes'
    description: Manage likes
  - name: 'login'
    description: Menage login
  - name: 'stream'
    description: Menage a stream of user
  - name: "ban"
    description: Menage the ban action and unban action
  - name: "follow"
    description: Menage the follow and unfollow
  
  
#in this part I describe all the paths that exist and are required in the specifications
paths:
  /login:
    post:
      tags:  
        - "login"
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: Maria
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 16
                password:
                  type: string
                  example: paperino05
                  pattern: '^.*?$'
                  minLength: 8
                  maxLength: 25

        required: true
      responses:
        '201':
          description: Login successfull
          content:
            application/json:
              schema:
                $ref: '#/propriety/definition/mediaList'
        '403':
          description: Login failed
        '500': 
          description: Unexpected condition encountered
  
  





  /user:
        
    get:
      tags: 
        - "research"
      summary: Get the profile of user of application if exist
      description: User can find other users in application if exist
      operationId: getUserProfile
      
      parameters:
        - name: id
          in: query
          description: the id of the user we want to search
          schema:
            type: string
            pattern: "^.*?$"
            minLength: 3
            maxLength: 16
            example: "Giggione78"
        
        
      responses:
        '200' :
          description: The server processed the request successfully and will not return any content
          content:
            application/json:
              schema:
                $ref: "#/propriety/definition/userlist"
        '401' :
          description: Unauthorized Access
        '403':
          description: The server understood the request but denies the authorization
        '404':
          description: Not Found Resource could not be found but may be available in the future
        '500':
          description: Unexpected condition encountered


      
      



  /user/{id}:

    parameters:
      - $ref: "#/components/parameters/id"
      
    get:
      tags: 
        - "users"
      summary: return information of profile
      description: The user obtain a profile's information
      operationId: getProfile
     

      responses:
        '200' :
          $ref: "#/propriety/definition/profile_user"
          
        '404' :
          description: Not Found, user with such ID does not exist


    put:
      tags: 
        - "user"
      summary: Set UserName
      description: |-
        put a new user name or modify with a new username. It's a string between 3-16 characters

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: "Rapollo1211"
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true

      responses:
        '204' :
          description: No content
        '401' :
          description: Unauthorized Access
        
        '404':
          description: Not Found Resource 
        



#uploading a photo in personal profile
  /user/{id}/media:
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/photocount"
    post:
      tags: 
       - "media"
      summary: Uploading a photo
      description: The user can upload a photos in personal profile
      operationId: uploadPhoto
      requestBody:
        content:
          image/*:
            schema:
              description: "the content of photo"
              type: string
              format: binary
              example: "010010001001"
              minLength: 0
              maxLength: 100
        required: true
      responses:
        '200':
          description: The image uploaded correctly and return a id of photo
          content:
            application/json:
              schema:
                $ref: "#/propriety/definition/photo"
          
        '403':
          description: The server understood the request but denies the authorization
        '404':
          description: Not Found Resource could not be found but may be available in the future
        
  /user/{id}/media/{photo_id}:
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/photo-id"
    
      
    delete:
      tags:
        - "media"
      summary: Delete a photo from personal profile
      description: Delete photo
      operationId: deletePhoto

      responses:
        '200':
          description: The image deleted correctly
        '403':
          description: The server understood the request but denies the authorization
        '404':
          description: Not Found Resource could not be found but may be available in the future

  /user/{id}/media/{photo_id}/comments:
    parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/photo-id"
      
    post:
      tags: 
        - "comment"
      summary: user can comment photo
      description: add a new commment in photo
      operationId: commentPhoto

      requestBody:
        description: id of user and relative comment
        content:
          application/json:
            schema:
              description: information of user that comment a photo
              type: object
              properties:
                user_id:
                  $ref: "#/components/parameters/id"
                nickname:
                  $ref: "#/components/parameters/nickname"   
                comment: 
                  type: string
                  minLength: 1
                  maxLength: 250
                  pattern: '^.*?$'
                  example: nice photo
                  description: comment
      responses:
        '200':
          description: The comment is insert correctly, and return a id of comment
          content:
            application/json:
              schema:
                $ref: "#/components/parameters/c_id"
              
                
          
        '403':
          description: The server understood the request but denies the authorization
        '404':
          description: Not Found Resource could not be found but may be available in the future
          
          
          
  /user/{id}/media/{photo_id}/comments/{c_id}:
    delete:
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/photo-id"
        - $ref: "#/components/parameters/c_id"
      tags:
        - "comments"
      summary: Delete a comment from personal photo
      description: Delete comment
      operationId: uncommentPhoto
      
      responses:
        '200':
          description: The comment removed correctly 
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource 
  
  
  
  
  /user/{id}/media/{photo_id}/likes:
    get:
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/photo-id"
      summary: return a list of like
      description: The list of users who have liked
      tags:
        - like
      responses:
        '200':
          description: List of users who liked the media resource.
          content:
            application/json:
              schema:
                $ref: "#/propriety/definition/list-likes"
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource 
          
          
      
      
      
    
    post:
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/photo-id"
      tags:
        - "likes"
      operationId: likePhoto
      requestBody:
        description: post a like in photo
        content:
          application/json:
            schema:
              description: information of user that comment a photo
              type: object
              properties:
                user_id:
                  $ref: "#/components/parameters/id"
                photo_id:
                  $ref: "#/components/parameters/photo-id"
                
                
      
      
      responses:
        '200':
          description: The like was successfully left
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource 
          
          
          
  /user/{id}/media/{photo_id}/likes/{like_id}:  
    delete:
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/photo-id"
        - $ref: "#/components/parameters/like_id"
      tags:
        - "likes"
      summary: Unlike a photo
      description: Unlike a photo
      operationId: unlikePhoto
      
      responses:
        '200':
          description: The like was successfully remove
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource 



 
  /user/{id}/stream:
  
    parameters:
      - $ref: "#/components/parameters/id"
      
      
    get:
      tags: 
        - "stream"
      summary: get a user's stream
      description: returns all the photos that of the followed users
      operationId: getMyStream
      
      responses:
        '200':
            $ref: '#/propriety/definition/mediaList'
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource
        
    
  /user/{id}/banned:
  
    parameters:
      - $ref: "#/components/parameters/id"
    
    put:
      tags:
        - "ban"
      summary: ban a user
      description: you can select a id of user that you want ban
      operationId: banUser
      
      responses:
      
        '200':
          description: OK
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource
  
  
  
  /user/{id}/banned/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
      
    delete:
      tags:
        - "ban"
      summary: unban a user
      description: you can select a id of user that you want unban
      operationId: unbanUser
      
      responses:
      
        '200':
          description: OK
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource
  
  
  
  /user/{id}/followers:
    parameters:
      - $ref: "#/components/parameters/id"
    put:
      tags:
        - "follow"
      summary: follow another profile
      description: follow another profile
      operationId: followUser
      
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource
  
  
  
  
    
    
    delete:
      tags:
        - "follow"
      summary: unfollow a user
      description: unfollow a user
      operationId: unfollowUser
      
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized operation
        '404':
          description: Not Found Resource
      
      
   
      
    
      
          
          

                   


          
      

        



#_______________________________________________________________________________
components:
  parameters:

    id:
      name: id
      in: path
      description: unique id of user
      required: true
      schema:
        description: string between 3-16 characters
        type: string
        pattern: '^.*?$'
        example: Momo121
        minLength: 3
        maxLength: 16
        readOnly: true

  #it's a nickname that appears when we open a profile
    nickname:
      name: nickname
      in: query
      description: user's nickname
      required: true
      schema:
        description: string between 3-16 characters
        type: string
        pattern: '^.*?$'
        example: _Luca129_
        minLength: 3
        maxLength: 16
        readOnly: true
  #it's a counter of photos 
  
  
    photocount:
      name: photocount
      in: query
      description: it's a counter of photos in user's profile
      required: true
      schema:
        description: counter of photos
        type: integer
        minimum: 0
        maximum: 99999
        readOnly: true
        
        
        
    c_id:
      name: c_id
      in: path
      description: gives a comment an identification code that allows you to do   more operations
      required: true
      schema:

        description: comment id
        type: string
        minLength: 3
        maxLength: 16
        readOnly: true
        
        
    photo-id:
      name: photo_id
      in: path
      required: true
      description: identification string of the photo, it's unique
      schema: 
        description: unique string id
        type: string
        minLength: 0
        maxLength: 999 
        example: "Av89Op0"
        readOnly: true
      
        
    like_id:
      name: like_id
      in: path
      required: true
      description: identification number of like in a photo, it's unique
      schema: 
        $ref: "#/components/parameters/nickname" 
          
    
    
                
        

    
    
    
  
    
          
#_______________________________________________________________________

propriety:
  definition:
  
      
    photo:
      description: information of photo
      type: object
      parameters:
        nickname:
          $ref: "#/components/parameters/nickname"
        id:
          $ref: "#/components/parameters/id"
        photo_id: 
          $ref: "#/components/parameters/photo-id"
        photo:
          type: object
          propreties:
            description: photo's data
            format: binary
            example: "100001000"
        list-likes:
          $ref: "#/propriety/definition/list-likes"
        list-comment:
          $ref: "#/propriety/definition/list-comments"
    
    
            
    mediaList:
      description: it's a list of photos from folloiwing users
      content:
        application/json:
          schema:
            description: list of photos
            type: array
            items:
              photo:
                $ref: "#/propriety/definition/photo"
      
    
              
    userlist:
      description: it's a list of users
      content:
        application/json:
          schema:
            description: list of users
            type: array
            items:
              
              id:
                $ref: "#/components/parameters/id"
              nickname:
                $ref: "#/components/parameters/nickname"
              
    profile_user:
      description: it's a complete a profile of user
      content:
        application/json:
          schema:
            nickname:
              $ref: "#/components/parameters/nickname"
            id:
              $ref: "#/components/parameters/id"
            medialist:
              $ref: "#/propriety/definition/mediaList"
            counters:
              $ref: "#/propriety/definition/counters"
    counters:
      type: object
      in: query
      parameters:
        
        media:
          type: integer
          format: int32
          description: Number of user media
        follows:
          type: integer
          format: int32
          description: Number of users followed by this user
        followed_by:
          type: integer
          format: int32
          description: Number of followers of this user
          
    list-likes:
      description: It's a list of likes in a photo
      type: array
      parameters:
          
        nickname:
          $ref: "#/components/parameters/nickname"
        id:
          $ref: "#/components/parameters/id"
  
    list-comments:
      description: It's a list of comment
      type: array
      parameters:
        nickname:
          $ref: "#/components/parameters/nickname"
        id:
          $ref: "#/components/parameters/id"
        comment-id:
          $ref: "#/components/parameters/c_id"
        comment:
          type: object
          schema:
            description: comment 
            type: string
            minLength: 1
            maxLength: 250
            pattern: '^.*?$'
            example: nice photo
      
        
            
            
    

      
      










  
  
        

              
   

      



  
    

